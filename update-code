#!/usr/bin/env node

var File = require('./lib/file');
var Folder = require('./lib/folder');
var Git = require('./lib/git');
var Shell = require('./lib/shell');

var repo = 'git@github.com:trambarhq/trambar.git';
var wf = 'codebase';

var part = process.argv[2] || 'all';
var parts = [ 'admin', 'client', 'backend', 'common' ];

// update or create working folder
Shell.chdir(__dirname);
var branch = Git.getCurrentBranch();
if (Folder.exists(wf)) {
    Shell.chdir(wf);
    Git.reset();
    Git.fetch();
    Git.checkout(branch, { force: true });
    Git.rebase();
    Shell.chdir(__dirname);
} else {
    Git.clone(repo, wf);
    Git.checkout(branch, { force: true });
}

var existingVersion = File.readText('VERSION').trim();
var newVersion;
parts.forEach((part) => {
    var path = `./${wf}/${part}/package.json`;
    var pkg = File.readJSON(path);
    if (!newVersion) {
        newVersion = pkg.version;
    } else {
        if (newVersion !== pkg.version) {
            console.log(`Version mismatch: ${part}`);
            process.exit(-1);
        }
    }
});

if (part === 'admin' || part === 'client' || part === 'all') {
    Shell.chdir(`${wf}/common`);
    Shell.run('npm ci');
    Shell.chdir(__dirname);
}

if (part === 'admin' || part === 'all') {
    // rebuild client-side JS code
    Folder.create(`${wf}/admin/www`);
    Shell.chdir(`${wf}/admin`);
    Shell.run('npm ci');
    Shell.run('npm run build');
    Shell.chdir(__dirname);

    // copy files into Docker folder for Nginx image
    Folder.copy(`${wf}/admin/www`, 'docker/nginx/admin');
}

if (part === 'client' || part === 'all') {
    Folder.create(`${wf}/client/www`);
    Folder.create(`${wf}/client/www-cordova`);
    Shell.chdir(`${wf}/client`);
    Shell.run('npm ci');
    Shell.run('npm run build');
    Shell.run('npm run build cordova');
    Shell.chdir(__dirname);

    // copy files into Docker folder for Nginx image
    Folder.copy(`${wf}/client/www`, 'docker/nginx/client');
    // copy files into Cordova folder
    Folder.copy(`${wf}/client/www-cordova`, 'cordova/trambar/www');
} else if (part === 'cordova') {
    Folder.create(`${wf}/client/www-cordova`);
    Shell.chdir(`${wf}/client`);
    Shell.run('npm ci');
    Shell.run('npm run build cordova');
    Shell.chdir(__dirname);
    Folder.copy(`${wf}/client/www-cordova`, 'cordova/trambar/www');
}

if (part === 'backend' || part === 'all') {
    // copy files into Docker folder for Node image
    Folder.copy(`${wf}/backend`, 'docker/node/backend');
    Folder.copy(`${wf}/client/src/locales`, 'docker/node/backend/src/locales');
    Folder.copy(`${wf}/common`, 'docker/node/common');
    File.copy(`${wf}/backend/package.json`, 'docker/node/package.json');
    File.copy(`${wf}/backend/package-lock.json`, 'docker/node/package-lock.json');
    File.copy(`${wf}/backend/package.json`, 'docker/node-dev/package.json');
    File.copy(`${wf}/backend/package-lock.json`, 'docker/node-dev/package-lock.json');

    // don't need WebDAV support in production build
    Shell.chdir(`docker/node`);
    Shell.run('npm remove jsDAV jsdav-promise gnu-tools');
    Shell.chdir(__dirname);
}

if (newVersion === existingVersion) {
    console.log(`Warning: Version number has not been updated in source code`);
} else {
    File.writeText('VERSION', newVersion);
}
