#!/usr/bin/env node

var _ = require('lodash');
var Promise = require('bluebird');
var FS = require('fs');
var ChildProcess = require('child_process');
var Path = require('path');
var Phantom = require('phantom');
var XML2JS = require('xml2js');

getIcons().then((icons) => {
    var chosen = process.argv[2] || 'all';
    return Promise.each(icons, (icon) => {
        var filename = 'splash-screen.html';
        if (icon.platform === 'windows') {
            filename = 'splash-screen-simple.html';
        }
        if (icon.platform !== 'android') {
            return;
        }
        var path = Path.resolve(`${__dirname}/../../trambar/client/assets/${filename}`);
        if (/^[A-Z]:\\/i.test(path)) {
            path = '/' + _.replace(path, /\\/g, '/');
        }
        var url = 'file://' + path;
        var dstPath = Path.resolve(`./trambar/${icon.src}`);
        var width = parseInt(icon.width);
        var height = parseInt(icon.height);
        switch (icon.density) {
            case 'ldpi':
                width = 36;
                height = 36;
                break;
            case 'mdpi':
                width = 48;
                height = 48;
                break;
            case 'hdpi':
                width = 72;
                height = 72;
                break;
            case 'xhdpi':
                width = 96;
                height = 96;
                break;
            case 'xxhdpi':
                width = 144;
                height = 144;
                break;
            case 'xxxhdpi':
                width = 192;
                height = 192;
                break;
        }
        if (width && height && dstPath) {
            console.log(`Creating ${dstPath}...`);
            if (icon.platform === 'android') {
                var tmpPath = dstPath + '.rectangle.png';
                return createSplashScreen(url, width, height, tmpPath).then(() => {
                    return applyCircularMask(tmpPath, width, height, 2, dstPath).then(() => {
                        return FS.unlinkSync(tmpPath);
                    });
                }).catch((err) => {
                    console.error(err);
                });
            } else {
                return createSplashScreen(url, width, height, dstPath).catch((err) => {
                    console.error(err);
                });
            }
        }
    }).then(() => {
        process.exit(0);
    });
});

function createSplashScreen(url, width, height, dstPath) {
    try {
        FS.unlinkSync(dstPath);
    } catch (err) {
    }
    return B(Phantom.create(['--ignore-ssl-errors=yes'])).then((phantom) => {
        return B(phantom.createPage()).then((page) => {
            var zoom = 1;
            if (width > height) {
                zoom = width / 480;
            } else {
                zoom = height / 360;
            }
            var properties = {
                viewportSize: { width,  height },
                zoomFactor: zoom,
            };
            return Promise.each(_.keys(properties), (key) => {
                return page.property(key, properties[key]);
            }).then(() => {
                return page.open(url);
            }).then(() => {
                return page.render(dstPath);
            });
        }).finally(() => {
            return phantom.exit();
        });
    });
}

function applyCircularMask(srcPath, width, height, reduction, dstPath) {
    return new Promise((resolve, reject) => {
        var cmd = `convert`;
        var args = [], arg = args.push.bind(args);
        var x = Math.floor(width / 2);
        var y = Math.floor(height / 2);
        var w = Math.floor(width / 2 - reduction);
        var h = Math.floor(height / 2 - reduction);

        arg(srcPath);
        arg('-alpha', 'on');
        arg('-background', 'none');
        arg('(');
            arg('+clone');
            arg('-channel', 'a');
            arg('-evaluate', 'multiply', 0);
            arg('+channel');
            arg('-fill', 'white');
            arg('-draw', `ellipse ${x} ${y}, ${w},${h}, 0,360`);
        arg(')');
        arg('-compose', 'DstIn');
        arg('-composite');
        arg(dstPath);

        ChildProcess.execFile(cmd, args, (err, stdout, stderr) => {
            if (!err) {
                resolve(stdout);
            } else {
                reject(err);
            }
        });
    });
}

function getIcons() {
    var chosen = process.argv[2] || 'all';
    return new Promise((resolve, reject) => {
        var configPath = './trambar/config.xml';
        var configText = FS.readFileSync(configPath, 'utf8');
        XML2JS.parseString(configText, (err, config) => {
            if (!err) {
                var list = [];
                _.each(config.widget.platform, (platform) => {
                    _.each(platform.icon, (icon) => {
                        var object = _.clone(icon.$);
                        object.platform = platform.$.name;
                        if (chosen === 'all' || object.platform === chosen) {
                            list.push(object);
                        }
                    });
                });
                resolve(list);
            } else {
                reject(err);
            }
        });
    });
}

function B(p) {
    return Promise.resolve(p);
}
