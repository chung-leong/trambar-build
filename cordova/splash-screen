#!/usr/bin/node

var _ = require('lodash');
var Promise = require('bluebird');
var FS = require('fs');
var Path = require('path');
var Phantom = require('phantom');
var XML2JS = require('xml2js');

getSplashScreens().then((screens) => {
    var url = 'file://' + Path.resolve(`${__dirname}/../../trambar/client/assets/splash-screen.html`);
    return Promise.each(screens, (screen) => {
        var dstPath = Path.resolve(`./trambar/${screen.src}`);
        var width = parseInt(screen.width);
        var height = parseInt(screen.height);
        switch (screen.density) {
            case 'port-ldpi':
                width = 200;
                height = 320;
                break;
            case 'land-ldpi':
                width = 320;
                height = 200;
                break;
            case 'port-mdpi':
                width = 320;
                height = 480;
                break;
            case 'land-mdpi':
                width = 480;
                height = 320;
                break;
            case 'port-hdpi':
                width = 480;
                height = 800;
                break;
            case 'land-hdpi':
                width = 800;
                height = 480;
                break;
            case 'port-xhdpi':
                width = 720;
                height = 1280;
                break;
            case 'land-xhdpi':
                width = 1280;
                height = 720;
                break;
            case 'port-xxhdpi':
                width = 960;
                height = 1600;
                break;
            case 'land-xxhdpi':
                width = 1600;
                height = 960;
                break;
            case 'port-xxxhdpi':
                width = 1280;
                height = 1920;
                break;
            case 'land-xxxhdpi':
                width = 1920;
                height = 1280;
                break;
        }
        if (width && height && dstPath) {
            return createSplashScreen(url, width, height, dstPath).catch((err) => {
                console.error(err);
            });
        }
    }).then(() => {
        process.exit(0);
    });
});

function createSplashScreen(url, width, height, dstPath) {
    console.log(`Creating ${dstPath}...`);
    try {
        FS.unlinkSync(dstPath);
    } catch (err) {
    }
    return B(Phantom.create(['--ignore-ssl-errors=yes'])).then((phantom) => {
        return B(phantom.createPage()).then((page) => {
            var zoom = 1;
            if (width > height) {
                zoom = width / 1280;
            } else {
                zoom = height / 1024;
            }
            var properties = {
                viewportSize: { width,  height },
                zoomFactor: zoom,
            };
            return Promise.each(_.keys(properties), (key) => {
                return page.property(key, properties[key]);
            }).then(() => {
                return page.open(url);
            }).then(() => {
                return page.render(dstPath);
            });
        }).finally(() => {
            return phantom.exit();
        });
    });
}

function getSplashScreens() {
    return new Promise((resolve, reject) => {
        var configPath = './trambar/config.xml';
        var configText = FS.readFileSync(configPath, 'utf8');
        XML2JS.parseString(configText, (err, config) => {
            if (!err) {
                var list = [];
                _.each(config.widget.platform, (platform) => {
                    _.each(platform.splash, (splash) => {
                        list.push(splash.$);
                    });
                });
                resolve(list);
            } else {
                reject(err);
            }
        });
    });
}

function B(p) {
    return Promise.resolve(p);
}
